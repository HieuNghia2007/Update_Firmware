
Update_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001750  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080018d8  080018d8  000118d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a00  08001a00  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  08001a00  08001a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a08  08001a08  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a08  08001a08  00011a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a0c  08001a0c  00011a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  08001a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00002044  200002c0  08001cd0  000202c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002304  08001cd0  00022304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003dc5  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000efd  00000000  00000000  000240b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000428  00000000  00000000  00024fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a0  00000000  00000000  000253e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed5d  00000000  00000000  00025780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004872  00000000  00000000  000444dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbe52  00000000  00000000  00048d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ff8  00000000  00000000  00104bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002c0 	.word	0x200002c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018b8 	.word	0x080018b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002c4 	.word	0x200002c4
 80001c4:	080018b8 	.word	0x080018b8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <DMA2_Stream2_Clear_InterruptFlag>:
#include "stm32f4xx_hal.h"
#include "Mylib.h"

/* Function */
void DMA2_Stream2_Clear_InterruptFlag()
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
	uint32_t* DMA2_LIFCR = (uint32_t*)(DMA2_BASE_ADD + 0x08);
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <DMA2_Stream2_Clear_InterruptFlag+0x24>)
 80004d8:	607b      	str	r3, [r7, #4]
	*DMA2_LIFCR |= 0b11111 << 18;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 02f8 	orr.w	r2, r3, #8126464	; 0x7c0000
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40026408 	.word	0x40026408

080004f8 <DMA2_Init>:

/* Stream number (0-7) and Channel selection (0-7) */
void DMA2_Init(int Stream, int Channel, uint32_t ScrAddr, uint32_t DstAddr, uint32_t DataLength)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b08b      	sub	sp, #44	; 0x2c
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	603b      	str	r3, [r7, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <DMA2_Init+0xbc>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a29      	ldr	r2, [pc, #164]	; (80005b4 <DMA2_Init+0xbc>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <DMA2_Init+0xbc>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]

	uint32_t* DMA_SxCR = (uint32_t*)(DMA2_BASE_ADD + 0x10 + 0x18 * Stream);
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	4613      	mov	r3, r2
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	4413      	add	r3, r2
 800052a:	00db      	lsls	r3, r3, #3
 800052c:	461a      	mov	r2, r3
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <DMA2_Init+0xc0>)
 8000530:	4413      	add	r3, r2
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t* DMA_SxNDTR = (uint32_t*)(DMA2_BASE_ADD + 0x14 + 0x18 * Stream);
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	461a      	mov	r2, r3
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <DMA2_Init+0xc4>)
 8000542:	4413      	add	r3, r2
 8000544:	623b      	str	r3, [r7, #32]
	uint32_t* DMA_SxPAR = (uint32_t*)(DMA2_BASE_ADD + 0x18 + 0x18 * Stream);
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	4613      	mov	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	461a      	mov	r2, r3
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <DMA2_Init+0xc8>)
 8000554:	4413      	add	r3, r2
 8000556:	61fb      	str	r3, [r7, #28]
	uint32_t* DMA_SxM0AR = (uint32_t*)(DMA2_BASE_ADD + 0x1c + 0x18 * Stream);
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	4613      	mov	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4413      	add	r3, r2
 8000560:	00db      	lsls	r3, r3, #3
 8000562:	461a      	mov	r2, r3
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <DMA2_Init+0xcc>)
 8000566:	4413      	add	r3, r2
 8000568:	61bb      	str	r3, [r7, #24]

	/* Data transfer direction: Peripheral to memory */

	/* Disable Stream before Configure */
	*DMA_SxCR &= ~1;
 800056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f023 0201 	bic.w	r2, r3, #1
 8000572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000574:	601a      	str	r2, [r3, #0]

	/* Configure DMA stream x: Select channel, Memory increment mode, Circular mode enable */
	*DMA_SxCR |= (Channel << 25) | (1 << 10) | (1 << 8);
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	0652      	lsls	r2, r2, #25
 800057e:	4313      	orrs	r3, r2
 8000580:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	601a      	str	r2, [r3, #0]

	/* Set Number of data for DMA stream x */
	*DMA_SxNDTR = DataLength;
 8000588:	6a3b      	ldr	r3, [r7, #32]
 800058a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800058c:	601a      	str	r2, [r3, #0]

	/* Set Peripheral address for DMA stream x */
	*DMA_SxPAR = (uint32_t)ScrAddr;
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]

	/* Set Memory 0 address for DMA stream x */
	*DMA_SxM0AR = (uint32_t)DstAddr;
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	601a      	str	r2, [r3, #0]

	/* Enable Stream */
	*DMA_SxCR |= 1;
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f043 0201 	orr.w	r2, r3, #1
 80005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	372c      	adds	r7, #44	; 0x2c
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40026410 	.word	0x40026410
 80005bc:	40026414 	.word	0x40026414
 80005c0:	40026418 	.word	0x40026418
 80005c4:	4002641c 	.word	0x4002641c

080005c8 <DMA2_Init_IT>:

/* Stream number (0-7) and Channel selection (0-7) */
void DMA2_Init_IT(int Stream, int Channel, uint32_t ScrAddr, uint32_t DstAddr, uint32_t DataLength)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	603b      	str	r3, [r7, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <DMA2_Init_IT+0xd8>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a30      	ldr	r2, [pc, #192]	; (80006a0 <DMA2_Init_IT+0xd8>)
 80005e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <DMA2_Init_IT+0xd8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

	uint32_t* DMA_SxCR = (uint32_t*)(DMA2_BASE_ADD + 0x10 + 0x18 * Stream);
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <DMA2_Init_IT+0xdc>)
 8000600:	4413      	add	r3, r2
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t* DMA_SxNDTR = (uint32_t*)(DMA2_BASE_ADD + 0x14 + 0x18 * Stream);
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	461a      	mov	r2, r3
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <DMA2_Init_IT+0xe0>)
 8000612:	4413      	add	r3, r2
 8000614:	623b      	str	r3, [r7, #32]
	uint32_t* DMA_SxPAR = (uint32_t*)(DMA2_BASE_ADD + 0x18 + 0x18 * Stream);
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	00db      	lsls	r3, r3, #3
 8000620:	461a      	mov	r2, r3
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <DMA2_Init_IT+0xe4>)
 8000624:	4413      	add	r3, r2
 8000626:	61fb      	str	r3, [r7, #28]
	uint32_t* DMA_SxM0AR = (uint32_t*)(DMA2_BASE_ADD + 0x1c + 0x18 * Stream);
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	461a      	mov	r2, r3
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <DMA2_Init_IT+0xe8>)
 8000636:	4413      	add	r3, r2
 8000638:	61bb      	str	r3, [r7, #24]

	/* Data transfer direction: Peripheral to memory */

	/* Disable Stream before Configure */
	*DMA_SxCR &= ~1;
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 0201 	bic.w	r2, r3, #1
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000644:	601a      	str	r2, [r3, #0]

	/* Configure DMA stream x: Select channel, Memory increment mode, Circular mode enable */
	*DMA_SxCR |= (Channel << 25) | (1 << 10) | (1 << 8);
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	0652      	lsls	r2, r2, #25
 800064e:	4313      	orrs	r3, r2
 8000650:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	601a      	str	r2, [r3, #0]

	/* Set Number of data for DMA stream x */
	*DMA_SxNDTR = DataLength;
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800065c:	601a      	str	r2, [r3, #0]

	/* Set Peripheral address for DMA stream x */
	*DMA_SxPAR = (uint32_t)ScrAddr;
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]

	/* Set Memory 0 address for DMA stream x */
	*DMA_SxM0AR = (uint32_t)DstAddr;
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	601a      	str	r2, [r3, #0]

	/* Clear all Interrupt flag before enable interrupt */
	DMA2_Stream2_Clear_InterruptFlag();
 800066a:	f7ff ff31 	bl	80004d0 <DMA2_Stream2_Clear_InterruptFlag>

	/* Enable interrupt DMA2 transfer complete*/
	*DMA_SxCR |= 1 << 4;
 800066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f043 0210 	orr.w	r2, r3, #16
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	601a      	str	r2, [r3, #0]

	/* Enable stream */
	*DMA_SxCR |= 1;
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f043 0201 	orr.w	r2, r3, #1
 8000682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000684:	601a      	str	r2, [r3, #0]

	uint32_t* NVIC_ISER1 = (uint32_t*)0xe000e104;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <DMA2_Init_IT+0xec>)
 8000688:	617b      	str	r3, [r7, #20]

	/* NVIC: Register set-enable Interrupt DMA2_Stream2 */
	*NVIC_ISER1 |= (1 << 26);
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40026410 	.word	0x40026410
 80006a8:	40026414 	.word	0x40026414
 80006ac:	40026418 	.word	0x40026418
 80006b0:	4002641c 	.word	0x4002641c
 80006b4:	e000e104 	.word	0xe000e104

080006b8 <UART6_Init>:

void UART6_Init()
{
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
	/* Enable CLK GPIOC */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <UART6_Init+0x8c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <UART6_Init+0x8c>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <UART6_Init+0x8c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

	uint32_t* GPIOC_MODER = (uint32_t*)GPIOC_BASE_ADD;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <UART6_Init+0x90>)
 80006dc:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOC_AFRL = (uint32_t*)(GPIOC_BASE_ADD + 0x20);
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <UART6_Init+0x94>)
 80006e0:	613b      	str	r3, [r7, #16]

	/* Set mode: Alternate function mode PC6 and PC7 */
	*GPIOC_MODER |= (0b10 << 12) | (0b10 << 14);
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	601a      	str	r2, [r3, #0]

	/* Select Alternate function: PC6 UART6_Tx, PC7 UART6_Rx */
	*GPIOC_AFRL |= (0b1000 << 24) | (0b1000 << 28);
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f043 4208 	orr.w	r2, r3, #2281701376	; 0x88000000
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	601a      	str	r2, [r3, #0]

	/* Enable CLK UART6 */
	__HAL_RCC_USART6_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <UART6_Init+0x8c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <UART6_Init+0x8c>)
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	6453      	str	r3, [r2, #68]	; 0x44
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <UART6_Init+0x8c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	f003 0320 	and.w	r3, r3, #32
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

	uint32_t* BRR = (uint32_t*)(UART6_BASE_ADD + 0x08);
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <UART6_Init+0x98>)
 8000718:	60fb      	str	r3, [r7, #12]
	uint32_t* CR1 = (uint32_t*)(UART6_BASE_ADD + 0x0c);
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <UART6_Init+0x9c>)
 800071c:	60bb      	str	r3, [r7, #8]

	/* Configure UART6: UART enable, Word length 1 Start bit - 8 Data bits, Transmitter enable, Receiver enable */
	*CR1 |= (1<< 13) | (1<< 3) | (1<< 2);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000726:	f043 030c 	orr.w	r3, r3, #12
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	6013      	str	r3, [r2, #0]
	 * Baud rate = 9600
	 * 16 000 000 / (16 * 9600) = 104.1667
	 * DIV_Mantissa = 104
	 * DIV_Fraction = 0.1667 * 16 ~ 3
	 * */
	*BRR = (104 << 4) | 3;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f240 6283 	movw	r2, #1667	; 0x683
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	371c      	adds	r7, #28
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40020800 	.word	0x40020800
 800074c:	40020820 	.word	0x40020820
 8000750:	40011408 	.word	0x40011408
 8000754:	4001140c 	.word	0x4001140c

08000758 <UART6_Send>:

void UART6_Send(char data)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	uint16_t* UART6_SR = (uint16_t*)(UART6_BASE_ADD + 0x00);
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <UART6_Send+0x58>)
 8000764:	60fb      	str	r3, [r7, #12]
	uint16_t* UART6_DR = (uint16_t*)(UART6_BASE_ADD + 0x04);
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <UART6_Send+0x5c>)
 8000768:	60bb      	str	r3, [r7, #8]
	/* Wait TXE: Transmit data register empty */
	while(((*UART6_SR >> 7) & 1) != 1);
 800076a:	bf00      	nop
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	09db      	lsrs	r3, r3, #7
 8000772:	b29b      	uxth	r3, r3
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f7      	beq.n	800076c <UART6_Send+0x14>

	/* Send Data */
	*UART6_DR = data;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	b29a      	uxth	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	801a      	strh	r2, [r3, #0]

	/* Wait TC: Transmission complete */
	while(((*UART6_SR >> 6) & 1) != 1);
 8000784:	bf00      	nop
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	099b      	lsrs	r3, r3, #6
 800078c:	b29b      	uxth	r3, r3
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f7      	beq.n	8000786 <UART6_Send+0x2e>

	/* Clear TC bit before continue send next data */
	*UART6_SR &= ~(1<<6);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800079e:	b29a      	uxth	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	801a      	strh	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	40011400 	.word	0x40011400
 80007b4:	40011404 	.word	0x40011404

080007b8 <UART6_Transmit>:

void UART6_Transmit(char* pData, int size)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	int i = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
	while (size > 0)
 80007c6:	e00c      	b.n	80007e2 <UART6_Transmit+0x2a>
	{
		UART6_Send(pData[i++]);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	60fa      	str	r2, [r7, #12]
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffbe 	bl	8000758 <UART6_Send>
		size--;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	3b01      	subs	r3, #1
 80007e0:	603b      	str	r3, [r7, #0]
	while (size > 0)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	dcef      	bgt.n	80007c8 <UART6_Transmit+0x10>
	}

}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <UART6_DMA_Stop>:

void UART6_DMA_Stop()
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
	uint32_t* CR3 = (uint32_t*)(UART6_BASE_ADD + 0x14);
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <UART6_DMA_Stop+0x24>)
 80007fc:	607b      	str	r3, [r7, #4]
	*CR3 &= ~(1 << 6);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40011414 	.word	0x40011414

0800081c <UART6_DMA_Start>:

void UART6_DMA_Start()
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
	uint32_t* CR3 = (uint32_t*)(UART6_BASE_ADD + 0x14);
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <UART6_DMA_Start+0x24>)
 8000824:	607b      	str	r3, [r7, #4]
	*CR3 |= (1 << 6);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40011414 	.word	0x40011414

08000844 <UART6_ClearOREFlag>:

void UART6_ClearOREFlag()
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
	uint16_t* UART6_SR = (uint16_t*)(UART6_BASE_ADD + 0x00);
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <UART6_ClearOREFlag+0x28>)
 800084c:	60fb      	str	r3, [r7, #12]
	uint16_t* UART6_DR = (uint16_t*)(UART6_BASE_ADD + 0x04);
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <UART6_ClearOREFlag+0x2c>)
 8000850:	60bb      	str	r3, [r7, #8]
	uint16_t tmp;
	tmp = *UART6_SR;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	80fb      	strh	r3, [r7, #6]
	tmp = *UART6_DR;
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	80fb      	strh	r3, [r7, #6]
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40011400 	.word	0x40011400
 8000870:	40011404 	.word	0x40011404

08000874 <UART6_Receive_DMA>:

void UART6_Receive_DMA(uint32_t ScrAddr, uint32_t DstAddr, uint32_t DataLength)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af02      	add	r7, sp, #8
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	DMA2_Init(2, 5, ScrAddr, DstAddr, DataLength);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	2105      	movs	r1, #5
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff fe34 	bl	80004f8 <DMA2_Init>
	UART6_ClearOREFlag();
 8000890:	f7ff ffd8 	bl	8000844 <UART6_ClearOREFlag>
	UART6_DMA_Start();
 8000894:	f7ff ffc2 	bl	800081c <UART6_DMA_Start>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <UART6_Receive_DMA_IT>:

void UART6_Receive_DMA_IT(uint32_t ScrAddr, uint32_t DstAddr, uint32_t DataLength)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	DMA2_Init_IT(2, 5, ScrAddr, DstAddr, DataLength);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	2105      	movs	r1, #5
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff fe86 	bl	80005c8 <DMA2_Init_IT>
	UART6_ClearOREFlag();
 80008bc:	f7ff ffc2 	bl	8000844 <UART6_ClearOREFlag>
	UART6_DMA_Start();
 80008c0:	f7ff ffac 	bl	800081c <UART6_DMA_Start>
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08d      	sub	sp, #52	; 0x34
 80008d0:	af00      	add	r7, sp, #0
int main(void)
 80008d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 f9a6 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f884 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f000 f8e0 	bl	8000aa4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  UART6_Init();
 80008e4:	f7ff fee8 	bl	80006b8 <UART6_Init>
  UART6_Transmit(msg1, sizeof(msg1));
 80008e8:	2110      	movs	r1, #16
 80008ea:	4836      	ldr	r0, [pc, #216]	; (80009c4 <main+0xf8>)
 80008ec:	f7ff ff64 	bl	80007b8 <UART6_Transmit>
  UART6_Transmit(msg2, sizeof(msg2));
 80008f0:	214f      	movs	r1, #79	; 0x4f
 80008f2:	4835      	ldr	r0, [pc, #212]	; (80009c8 <main+0xfc>)
 80008f4:	f7ff ff60 	bl	80007b8 <UART6_Transmit>
  UART6_Receive_DMA((uint32_t)UART6_DR, (uint32_t)buffer, (uint32_t)sizeof(buffer));
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <main+0x100>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <main+0x104>)
 8000900:	2220      	movs	r2, #32
 8000902:	4619      	mov	r1, r3
 8000904:	f7ff ffb6 	bl	8000874 <UART6_Receive_DMA>
  char key_search[] = "Firmware size:";
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <main+0x108>)
 800090a:	f107 0414 	add.w	r4, r7, #20
 800090e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000910:	c407      	stmia	r4!, {r0, r1, r2}
 8000912:	8023      	strh	r3, [r4, #0]
 8000914:	3402      	adds	r4, #2
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	7023      	strb	r3, [r4, #0]
  while(!strstr(buffer, key_search) || !strstr(buffer, "\r\n"));
 800091a:	bf00      	nop
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	482b      	ldr	r0, [pc, #172]	; (80009d0 <main+0x104>)
 8000924:	f000 ff22 	bl	800176c <strstr>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0f6      	beq.n	800091c <main+0x50>
 800092e:	492a      	ldr	r1, [pc, #168]	; (80009d8 <main+0x10c>)
 8000930:	4827      	ldr	r0, [pc, #156]	; (80009d0 <main+0x104>)
 8000932:	f000 ff1b 	bl	800176c <strstr>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0ef      	beq.n	800091c <main+0x50>
  char* start_pos = strstr(buffer, key_search) + strlen(key_search);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4823      	ldr	r0, [pc, #140]	; (80009d0 <main+0x104>)
 8000944:	f000 ff12 	bl	800176c <strstr>
 8000948:	4604      	mov	r4, r0
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fc3a 	bl	80001c8 <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	4423      	add	r3, r4
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  char len_str[16] = {0};
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
  int index = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(start_pos[index] != '\r')
 800096e:	e00b      	b.n	8000988 <main+0xbc>
  {
	  len_str[index] = start_pos[index];
 8000970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000974:	4413      	add	r3, r2
 8000976:	7819      	ldrb	r1, [r3, #0]
 8000978:	1d3a      	adds	r2, r7, #4
 800097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097c:	4413      	add	r3, r2
 800097e:	460a      	mov	r2, r1
 8000980:	701a      	strb	r2, [r3, #0]
	  index++;
 8000982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000984:	3301      	adds	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(start_pos[index] != '\r')
 8000988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d1ed      	bne.n	8000970 <main+0xa4>
  }
  len_num = atoi(len_str);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4618      	mov	r0, r3
 8000998:	f000 feb2 	bl	8001700 <atoi>
 800099c:	4603      	mov	r3, r0
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <main+0x110>)
 80009a0:	6013      	str	r3, [r2, #0]
  UART6_DMA_Stop();
 80009a2:	f7ff ff27 	bl	80007f4 <UART6_DMA_Stop>
  UART6_Receive_DMA_IT((uint32_t)UART6_DR, (uint32_t)firmware, len_num);
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <main+0x100>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <main+0x114>)
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <main+0x110>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	f7ff ff74 	bl	80008a0 <UART6_Receive_DMA_IT>
  UART6_Transmit(msg3, sizeof(msg3));
 80009b8:	2120      	movs	r1, #32
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <main+0x118>)
 80009bc:	f7ff fefc 	bl	80007b8 <UART6_Transmit>
  //update();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <main+0xf4>
 80009c2:	bf00      	nop
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000010 	.word	0x20000010
 80009cc:	200000c4 	.word	0x200000c4
 80009d0:	200022dc 	.word	0x200022dc
 80009d4:	080018dc 	.word	0x080018dc
 80009d8:	080018d8 	.word	0x080018d8
 80009dc:	200022fc 	.word	0x200022fc
 80009e0:	200002dc 	.word	0x200002dc
 80009e4:	20000060 	.word	0x20000060

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2230      	movs	r2, #48	; 0x30
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 feb0 	bl	800175c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <SystemClock_Config+0xb4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <SystemClock_Config+0xb4>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <SystemClock_Config+0xb4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <SystemClock_Config+0xb8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <SystemClock_Config+0xb8>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <SystemClock_Config+0xb8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fa3d 	bl	8000ed8 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a64:	f000 f84c 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fca0 	bl	80013c8 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a8e:	f000 f837 	bl	8000b00 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3750      	adds	r7, #80	; 0x50
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_GPIO_Init+0x30>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <MX_GPIO_Init+0x30>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_GPIO_Init+0x30>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <DMA2_Stream2_IRQHandler>:

/* USER CODE BEGIN 4 */
void DMA2_Stream2_IRQHandler()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	UART6_Transmit(msg4, sizeof(msg4));
 8000adc:	2144      	movs	r1, #68	; 0x44
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <DMA2_Stream2_IRQHandler+0x1c>)
 8000ae0:	f7ff fe6a 	bl	80007b8 <UART6_Transmit>
	Update(len_num, firmware);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <DMA2_Stream2_IRQHandler+0x20>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4904      	ldr	r1, [pc, #16]	; (8000afc <DMA2_Stream2_IRQHandler+0x24>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fef0 	bl	80018d0 <__Update_veneer>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000080 	.word	0x20000080
 8000af8:	200022fc 	.word	0x200022fc
 8000afc:	200002dc 	.word	0x200002dc

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f890 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfe:	f7ff ffd7 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f000 fd87 	bl	8001714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fe61 	bl	80008cc <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8000c18:	08001a10 	.word	0x08001a10
  ldr r2, =_sbss
 8000c1c:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8000c20:	20002304 	.word	0x20002304

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f90d 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f808 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff ff56 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f917 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f8ed 	bl	8000e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000c8 	.word	0x200000c8
 8000cc4:	200000d0 	.word	0x200000d0
 8000cc8:	200000cc 	.word	0x200000cc

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200000d0 	.word	0x200000d0
 8000cf0:	20002300 	.word	0x20002300

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20002300 	.word	0x20002300

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff47 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff5c 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffb0 	bl	8000e2c <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e264      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d075      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef6:	4ba3      	ldr	r3, [pc, #652]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d00c      	beq.n	8000f1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f02:	4ba0      	ldr	r3, [pc, #640]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d112      	bne.n	8000f34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4b9d      	ldr	r3, [pc, #628]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f1a:	d10b      	bne.n	8000f34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	4b99      	ldr	r3, [pc, #612]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d05b      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x108>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d157      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e23f      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d106      	bne.n	8000f4c <HAL_RCC_OscConfig+0x74>
 8000f3e:	4b91      	ldr	r3, [pc, #580]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a90      	ldr	r2, [pc, #576]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e01d      	b.n	8000f88 <HAL_RCC_OscConfig+0xb0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x98>
 8000f56:	4b8b      	ldr	r3, [pc, #556]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a8a      	ldr	r2, [pc, #552]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b88      	ldr	r3, [pc, #544]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a87      	ldr	r2, [pc, #540]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e00b      	b.n	8000f88 <HAL_RCC_OscConfig+0xb0>
 8000f70:	4b84      	ldr	r3, [pc, #528]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a83      	ldr	r2, [pc, #524]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b81      	ldr	r3, [pc, #516]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a80      	ldr	r2, [pc, #512]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff feb0 	bl	8000cf4 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff feac 	bl	8000cf4 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e204      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	4b76      	ldr	r3, [pc, #472]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0xc0>
 8000fb6:	e014      	b.n	8000fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fe9c 	bl	8000cf4 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fe98 	bl	8000cf4 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e1f0      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	4b6c      	ldr	r3, [pc, #432]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0xe8>
 8000fde:	e000      	b.n	8000fe2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d063      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fee:	4b65      	ldr	r3, [pc, #404]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00b      	beq.n	8001012 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001002:	2b08      	cmp	r3, #8
 8001004:	d11c      	bne.n	8001040 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d116      	bne.n	8001040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	4b5c      	ldr	r3, [pc, #368]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <HAL_RCC_OscConfig+0x152>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d001      	beq.n	800102a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e1c4      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102a:	4b56      	ldr	r3, [pc, #344]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4952      	ldr	r1, [pc, #328]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 800103a:	4313      	orrs	r3, r2
 800103c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103e:	e03a      	b.n	80010b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d020      	beq.n	800108a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <HAL_RCC_OscConfig+0x2b0>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104e:	f7ff fe51 	bl	8000cf4 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fe4d 	bl	8000cf4 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e1a5      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	4b46      	ldr	r3, [pc, #280]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001074:	4b43      	ldr	r3, [pc, #268]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4940      	ldr	r1, [pc, #256]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	e015      	b.n	80010b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108a:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <HAL_RCC_OscConfig+0x2b0>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff fe30 	bl	8000cf4 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001098:	f7ff fe2c 	bl	8000cf4 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e184      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d030      	beq.n	8001124 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d016      	beq.n	80010f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_RCC_OscConfig+0x2b4>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fe10 	bl	8000cf4 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fe0c 	bl	8000cf4 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e164      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x200>
 80010f6:	e015      	b.n	8001124 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <HAL_RCC_OscConfig+0x2b4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fdf9 	bl	8000cf4 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001106:	f7ff fdf5 	bl	8000cf4 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e14d      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 800111a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a0 	beq.w	8001272 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10f      	bne.n	8001162 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115e:	2301      	movs	r3, #1
 8001160:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_RCC_OscConfig+0x2b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116a:	2b00      	cmp	r3, #0
 800116c:	d121      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_RCC_OscConfig+0x2b8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_RCC_OscConfig+0x2b8>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117a:	f7ff fdbb 	bl	8000cf4 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001180:	e011      	b.n	80011a6 <HAL_RCC_OscConfig+0x2ce>
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	42470000 	.word	0x42470000
 800118c:	42470e80 	.word	0x42470e80
 8001190:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001194:	f7ff fdae 	bl	8000cf4 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e106      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a6:	4b85      	ldr	r3, [pc, #532]	; (80013bc <HAL_RCC_OscConfig+0x4e4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d106      	bne.n	80011c8 <HAL_RCC_OscConfig+0x2f0>
 80011ba:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011be:	4a80      	ldr	r2, [pc, #512]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6713      	str	r3, [r2, #112]	; 0x70
 80011c6:	e01c      	b.n	8001202 <HAL_RCC_OscConfig+0x32a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d10c      	bne.n	80011ea <HAL_RCC_OscConfig+0x312>
 80011d0:	4b7b      	ldr	r3, [pc, #492]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d4:	4a7a      	ldr	r2, [pc, #488]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6713      	str	r3, [r2, #112]	; 0x70
 80011dc:	4b78      	ldr	r3, [pc, #480]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e0:	4a77      	ldr	r2, [pc, #476]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6713      	str	r3, [r2, #112]	; 0x70
 80011e8:	e00b      	b.n	8001202 <HAL_RCC_OscConfig+0x32a>
 80011ea:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ee:	4a74      	ldr	r2, [pc, #464]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	6713      	str	r3, [r2, #112]	; 0x70
 80011f6:	4b72      	ldr	r3, [pc, #456]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fa:	4a71      	ldr	r2, [pc, #452]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80011fc:	f023 0304 	bic.w	r3, r3, #4
 8001200:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d015      	beq.n	8001236 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120a:	f7ff fd73 	bl	8000cf4 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	e00a      	b.n	8001228 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f7ff fd6f 	bl	8000cf4 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001220:	4293      	cmp	r3, r2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e0c5      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	4b65      	ldr	r3, [pc, #404]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 800122a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ee      	beq.n	8001212 <HAL_RCC_OscConfig+0x33a>
 8001234:	e014      	b.n	8001260 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff fd5d 	bl	8000cf4 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	e00a      	b.n	8001254 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123e:	f7ff fd59 	bl	8000cf4 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e0af      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 8001256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ee      	bne.n	800123e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d105      	bne.n	8001272 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001266:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a55      	ldr	r2, [pc, #340]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 800126c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 809b 	beq.w	80013b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800127c:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d05c      	beq.n	8001342 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d141      	bne.n	8001314 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001290:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HAL_RCC_OscConfig+0x4ec>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fd2d 	bl	8000cf4 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fd29 	bl	8000cf4 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e081      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b0:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69da      	ldr	r2, [r3, #28]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	019b      	lsls	r3, r3, #6
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	085b      	lsrs	r3, r3, #1
 80012d4:	3b01      	subs	r3, #1
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	061b      	lsls	r3, r3, #24
 80012e0:	4937      	ldr	r1, [pc, #220]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x4ec>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fd02 	bl	8000cf4 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f4:	f7ff fcfe 	bl	8000cf4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e056      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x41c>
 8001312:	e04e      	b.n	80013b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HAL_RCC_OscConfig+0x4ec>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fceb 	bl	8000cf4 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001322:	f7ff fce7 	bl	8000cf4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e03f      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x44a>
 8001340:	e037      	b.n	80013b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e032      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_RCC_OscConfig+0x4e8>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d028      	beq.n	80013ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d121      	bne.n	80013ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d11a      	bne.n	80013ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800137e:	4013      	ands	r3, r2
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001384:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001386:	4293      	cmp	r3, r2
 8001388:	d111      	bne.n	80013ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	3b01      	subs	r3, #1
 8001398:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800139a:	429a      	cmp	r2, r3
 800139c:	d107      	bne.n	80013ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40007000 	.word	0x40007000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	42470060 	.word	0x42470060

080013c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0cc      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d90c      	bls.n	8001404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0b8      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800141c:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800143e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	494d      	ldr	r1, [pc, #308]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	4313      	orrs	r3, r2
 8001450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d044      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d119      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d003      	beq.n	8001486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	2b03      	cmp	r3, #3
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e06f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e067      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f023 0203 	bic.w	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4934      	ldr	r1, [pc, #208]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fc1c 	bl	8000cf4 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7ff fc18 	bl	8000cf4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e04f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 020c 	and.w	r2, r3, #12
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1eb      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d20c      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e032      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800154e:	f000 f821 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8001552:	4602      	mov	r2, r0
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	490a      	ldr	r1, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	5ccb      	ldrb	r3, [r1, r3]
 8001562:	fa22 f303 	lsr.w	r3, r2, r3
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1c8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fb7c 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00
 8001584:	40023800 	.word	0x40023800
 8001588:	080018ec 	.word	0x080018ec
 800158c:	200000c8 	.word	0x200000c8
 8001590:	200000cc 	.word	0x200000cc

08001594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800159a:	2100      	movs	r1, #0
 800159c:	6079      	str	r1, [r7, #4]
 800159e:	2100      	movs	r1, #0
 80015a0:	60f9      	str	r1, [r7, #12]
 80015a2:	2100      	movs	r1, #0
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015a6:	2100      	movs	r1, #0
 80015a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015aa:	4952      	ldr	r1, [pc, #328]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015ac:	6889      	ldr	r1, [r1, #8]
 80015ae:	f001 010c 	and.w	r1, r1, #12
 80015b2:	2908      	cmp	r1, #8
 80015b4:	d00d      	beq.n	80015d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80015b6:	2908      	cmp	r1, #8
 80015b8:	f200 8094 	bhi.w	80016e4 <HAL_RCC_GetSysClockFreq+0x150>
 80015bc:	2900      	cmp	r1, #0
 80015be:	d002      	beq.n	80015c6 <HAL_RCC_GetSysClockFreq+0x32>
 80015c0:	2904      	cmp	r1, #4
 80015c2:	d003      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x38>
 80015c4:	e08e      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80015c8:	60bb      	str	r3, [r7, #8]
       break;
 80015ca:	e08e      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015cc:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_RCC_GetSysClockFreq+0x168>)
 80015ce:	60bb      	str	r3, [r7, #8]
      break;
 80015d0:	e08b      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d2:	4948      	ldr	r1, [pc, #288]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015d4:	6849      	ldr	r1, [r1, #4]
 80015d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80015da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015dc:	4945      	ldr	r1, [pc, #276]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015de:	6849      	ldr	r1, [r1, #4]
 80015e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80015e4:	2900      	cmp	r1, #0
 80015e6:	d024      	beq.n	8001632 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e8:	4942      	ldr	r1, [pc, #264]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015ea:	6849      	ldr	r1, [r1, #4]
 80015ec:	0989      	lsrs	r1, r1, #6
 80015ee:	4608      	mov	r0, r1
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80015f8:	f04f 0500 	mov.w	r5, #0
 80015fc:	ea00 0204 	and.w	r2, r0, r4
 8001600:	ea01 0305 	and.w	r3, r1, r5
 8001604:	493d      	ldr	r1, [pc, #244]	; (80016fc <HAL_RCC_GetSysClockFreq+0x168>)
 8001606:	fb01 f003 	mul.w	r0, r1, r3
 800160a:	2100      	movs	r1, #0
 800160c:	fb01 f102 	mul.w	r1, r1, r2
 8001610:	1844      	adds	r4, r0, r1
 8001612:	493a      	ldr	r1, [pc, #232]	; (80016fc <HAL_RCC_GetSysClockFreq+0x168>)
 8001614:	fba2 0101 	umull	r0, r1, r2, r1
 8001618:	1863      	adds	r3, r4, r1
 800161a:	4619      	mov	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	f7fe fdd8 	bl	80001d8 <__aeabi_uldivmod>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4613      	mov	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e04a      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	461a      	mov	r2, r3
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001642:	f04f 0100 	mov.w	r1, #0
 8001646:	ea02 0400 	and.w	r4, r2, r0
 800164a:	ea03 0501 	and.w	r5, r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	014b      	lsls	r3, r1, #5
 800165c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001660:	0142      	lsls	r2, r0, #5
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	1b00      	subs	r0, r0, r4
 8001668:	eb61 0105 	sbc.w	r1, r1, r5
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	018b      	lsls	r3, r1, #6
 8001676:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800167a:	0182      	lsls	r2, r0, #6
 800167c:	1a12      	subs	r2, r2, r0
 800167e:	eb63 0301 	sbc.w	r3, r3, r1
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	00d9      	lsls	r1, r3, #3
 800168c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001690:	00d0      	lsls	r0, r2, #3
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	1912      	adds	r2, r2, r4
 8001698:	eb45 0303 	adc.w	r3, r5, r3
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	0299      	lsls	r1, r3, #10
 80016a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016aa:	0290      	lsls	r0, r2, #10
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	461a      	mov	r2, r3
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	f7fe fd8c 	bl	80001d8 <__aeabi_uldivmod>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4613      	mov	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	0c1b      	lsrs	r3, r3, #16
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	3301      	adds	r3, #1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	60bb      	str	r3, [r7, #8]
      break;
 80016e2:	e002      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80016e6:	60bb      	str	r3, [r7, #8]
      break;
 80016e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ea:	68bb      	ldr	r3, [r7, #8]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdb0      	pop	{r4, r5, r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	017d7840 	.word	0x017d7840

08001700 <atoi>:
 8001700:	220a      	movs	r2, #10
 8001702:	2100      	movs	r1, #0
 8001704:	f000 b8ce 	b.w	80018a4 <strtol>

08001708 <__errno>:
 8001708:	4b01      	ldr	r3, [pc, #4]	; (8001710 <__errno+0x8>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	200000d4 	.word	0x200000d4

08001714 <__libc_init_array>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4d0d      	ldr	r5, [pc, #52]	; (800174c <__libc_init_array+0x38>)
 8001718:	4c0d      	ldr	r4, [pc, #52]	; (8001750 <__libc_init_array+0x3c>)
 800171a:	1b64      	subs	r4, r4, r5
 800171c:	10a4      	asrs	r4, r4, #2
 800171e:	2600      	movs	r6, #0
 8001720:	42a6      	cmp	r6, r4
 8001722:	d109      	bne.n	8001738 <__libc_init_array+0x24>
 8001724:	4d0b      	ldr	r5, [pc, #44]	; (8001754 <__libc_init_array+0x40>)
 8001726:	4c0c      	ldr	r4, [pc, #48]	; (8001758 <__libc_init_array+0x44>)
 8001728:	f000 f8c6 	bl	80018b8 <_init>
 800172c:	1b64      	subs	r4, r4, r5
 800172e:	10a4      	asrs	r4, r4, #2
 8001730:	2600      	movs	r6, #0
 8001732:	42a6      	cmp	r6, r4
 8001734:	d105      	bne.n	8001742 <__libc_init_array+0x2e>
 8001736:	bd70      	pop	{r4, r5, r6, pc}
 8001738:	f855 3b04 	ldr.w	r3, [r5], #4
 800173c:	4798      	blx	r3
 800173e:	3601      	adds	r6, #1
 8001740:	e7ee      	b.n	8001720 <__libc_init_array+0xc>
 8001742:	f855 3b04 	ldr.w	r3, [r5], #4
 8001746:	4798      	blx	r3
 8001748:	3601      	adds	r6, #1
 800174a:	e7f2      	b.n	8001732 <__libc_init_array+0x1e>
 800174c:	08001a08 	.word	0x08001a08
 8001750:	08001a08 	.word	0x08001a08
 8001754:	08001a08 	.word	0x08001a08
 8001758:	08001a0c 	.word	0x08001a0c

0800175c <memset>:
 800175c:	4402      	add	r2, r0
 800175e:	4603      	mov	r3, r0
 8001760:	4293      	cmp	r3, r2
 8001762:	d100      	bne.n	8001766 <memset+0xa>
 8001764:	4770      	bx	lr
 8001766:	f803 1b01 	strb.w	r1, [r3], #1
 800176a:	e7f9      	b.n	8001760 <memset+0x4>

0800176c <strstr>:
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	780c      	ldrb	r4, [r1, #0]
 8001770:	b164      	cbz	r4, 800178c <strstr+0x20>
 8001772:	4603      	mov	r3, r0
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	1c5e      	adds	r6, r3, #1
 800177a:	b90a      	cbnz	r2, 8001780 <strstr+0x14>
 800177c:	4610      	mov	r0, r2
 800177e:	e005      	b.n	800178c <strstr+0x20>
 8001780:	4294      	cmp	r4, r2
 8001782:	d108      	bne.n	8001796 <strstr+0x2a>
 8001784:	460d      	mov	r5, r1
 8001786:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800178a:	b902      	cbnz	r2, 800178e <strstr+0x22>
 800178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8001792:	4297      	cmp	r7, r2
 8001794:	d0f7      	beq.n	8001786 <strstr+0x1a>
 8001796:	4633      	mov	r3, r6
 8001798:	e7ec      	b.n	8001774 <strstr+0x8>
	...

0800179c <_strtol_l.isra.0>:
 800179c:	2b01      	cmp	r3, #1
 800179e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017a2:	d001      	beq.n	80017a8 <_strtol_l.isra.0+0xc>
 80017a4:	2b24      	cmp	r3, #36	; 0x24
 80017a6:	d906      	bls.n	80017b6 <_strtol_l.isra.0+0x1a>
 80017a8:	f7ff ffae 	bl	8001708 <__errno>
 80017ac:	2316      	movs	r3, #22
 80017ae:	6003      	str	r3, [r0, #0]
 80017b0:	2000      	movs	r0, #0
 80017b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017b6:	4f3a      	ldr	r7, [pc, #232]	; (80018a0 <_strtol_l.isra.0+0x104>)
 80017b8:	468e      	mov	lr, r1
 80017ba:	4676      	mov	r6, lr
 80017bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80017c0:	5de5      	ldrb	r5, [r4, r7]
 80017c2:	f015 0508 	ands.w	r5, r5, #8
 80017c6:	d1f8      	bne.n	80017ba <_strtol_l.isra.0+0x1e>
 80017c8:	2c2d      	cmp	r4, #45	; 0x2d
 80017ca:	d134      	bne.n	8001836 <_strtol_l.isra.0+0x9a>
 80017cc:	f89e 4000 	ldrb.w	r4, [lr]
 80017d0:	f04f 0801 	mov.w	r8, #1
 80017d4:	f106 0e02 	add.w	lr, r6, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d05c      	beq.n	8001896 <_strtol_l.isra.0+0xfa>
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d10c      	bne.n	80017fa <_strtol_l.isra.0+0x5e>
 80017e0:	2c30      	cmp	r4, #48	; 0x30
 80017e2:	d10a      	bne.n	80017fa <_strtol_l.isra.0+0x5e>
 80017e4:	f89e 4000 	ldrb.w	r4, [lr]
 80017e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80017ec:	2c58      	cmp	r4, #88	; 0x58
 80017ee:	d14d      	bne.n	800188c <_strtol_l.isra.0+0xf0>
 80017f0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80017f4:	2310      	movs	r3, #16
 80017f6:	f10e 0e02 	add.w	lr, lr, #2
 80017fa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80017fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001802:	2600      	movs	r6, #0
 8001804:	fbbc f9f3 	udiv	r9, ip, r3
 8001808:	4635      	mov	r5, r6
 800180a:	fb03 ca19 	mls	sl, r3, r9, ip
 800180e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8001812:	2f09      	cmp	r7, #9
 8001814:	d818      	bhi.n	8001848 <_strtol_l.isra.0+0xac>
 8001816:	463c      	mov	r4, r7
 8001818:	42a3      	cmp	r3, r4
 800181a:	dd24      	ble.n	8001866 <_strtol_l.isra.0+0xca>
 800181c:	2e00      	cmp	r6, #0
 800181e:	db1f      	blt.n	8001860 <_strtol_l.isra.0+0xc4>
 8001820:	45a9      	cmp	r9, r5
 8001822:	d31d      	bcc.n	8001860 <_strtol_l.isra.0+0xc4>
 8001824:	d101      	bne.n	800182a <_strtol_l.isra.0+0x8e>
 8001826:	45a2      	cmp	sl, r4
 8001828:	db1a      	blt.n	8001860 <_strtol_l.isra.0+0xc4>
 800182a:	fb05 4503 	mla	r5, r5, r3, r4
 800182e:	2601      	movs	r6, #1
 8001830:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8001834:	e7eb      	b.n	800180e <_strtol_l.isra.0+0x72>
 8001836:	2c2b      	cmp	r4, #43	; 0x2b
 8001838:	bf08      	it	eq
 800183a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800183e:	46a8      	mov	r8, r5
 8001840:	bf08      	it	eq
 8001842:	f106 0e02 	addeq.w	lr, r6, #2
 8001846:	e7c7      	b.n	80017d8 <_strtol_l.isra.0+0x3c>
 8001848:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800184c:	2f19      	cmp	r7, #25
 800184e:	d801      	bhi.n	8001854 <_strtol_l.isra.0+0xb8>
 8001850:	3c37      	subs	r4, #55	; 0x37
 8001852:	e7e1      	b.n	8001818 <_strtol_l.isra.0+0x7c>
 8001854:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8001858:	2f19      	cmp	r7, #25
 800185a:	d804      	bhi.n	8001866 <_strtol_l.isra.0+0xca>
 800185c:	3c57      	subs	r4, #87	; 0x57
 800185e:	e7db      	b.n	8001818 <_strtol_l.isra.0+0x7c>
 8001860:	f04f 36ff 	mov.w	r6, #4294967295
 8001864:	e7e4      	b.n	8001830 <_strtol_l.isra.0+0x94>
 8001866:	2e00      	cmp	r6, #0
 8001868:	da05      	bge.n	8001876 <_strtol_l.isra.0+0xda>
 800186a:	2322      	movs	r3, #34	; 0x22
 800186c:	6003      	str	r3, [r0, #0]
 800186e:	4665      	mov	r5, ip
 8001870:	b942      	cbnz	r2, 8001884 <_strtol_l.isra.0+0xe8>
 8001872:	4628      	mov	r0, r5
 8001874:	e79d      	b.n	80017b2 <_strtol_l.isra.0+0x16>
 8001876:	f1b8 0f00 	cmp.w	r8, #0
 800187a:	d000      	beq.n	800187e <_strtol_l.isra.0+0xe2>
 800187c:	426d      	negs	r5, r5
 800187e:	2a00      	cmp	r2, #0
 8001880:	d0f7      	beq.n	8001872 <_strtol_l.isra.0+0xd6>
 8001882:	b10e      	cbz	r6, 8001888 <_strtol_l.isra.0+0xec>
 8001884:	f10e 31ff 	add.w	r1, lr, #4294967295
 8001888:	6011      	str	r1, [r2, #0]
 800188a:	e7f2      	b.n	8001872 <_strtol_l.isra.0+0xd6>
 800188c:	2430      	movs	r4, #48	; 0x30
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1b3      	bne.n	80017fa <_strtol_l.isra.0+0x5e>
 8001892:	2308      	movs	r3, #8
 8001894:	e7b1      	b.n	80017fa <_strtol_l.isra.0+0x5e>
 8001896:	2c30      	cmp	r4, #48	; 0x30
 8001898:	d0a4      	beq.n	80017e4 <_strtol_l.isra.0+0x48>
 800189a:	230a      	movs	r3, #10
 800189c:	e7ad      	b.n	80017fa <_strtol_l.isra.0+0x5e>
 800189e:	bf00      	nop
 80018a0:	080018fd 	.word	0x080018fd

080018a4 <strtol>:
 80018a4:	4613      	mov	r3, r2
 80018a6:	460a      	mov	r2, r1
 80018a8:	4601      	mov	r1, r0
 80018aa:	4802      	ldr	r0, [pc, #8]	; (80018b4 <strtol+0x10>)
 80018ac:	6800      	ldr	r0, [r0, #0]
 80018ae:	f7ff bf75 	b.w	800179c <_strtol_l.isra.0>
 80018b2:	bf00      	nop
 80018b4:	200000d4 	.word	0x200000d4

080018b8 <_init>:
 80018b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ba:	bf00      	nop
 80018bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018be:	bc08      	pop	{r3}
 80018c0:	469e      	mov	lr, r3
 80018c2:	4770      	bx	lr

080018c4 <_fini>:
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c6:	bf00      	nop
 80018c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ca:	bc08      	pop	{r3}
 80018cc:	469e      	mov	lr, r3
 80018ce:	4770      	bx	lr

080018d0 <__Update_veneer>:
 80018d0:	f85f f000 	ldr.w	pc, [pc]	; 80018d4 <__Update_veneer+0x4>
 80018d4:	20000261 	.word	0x20000261

Disassembly of section .data:

20000000 <msg1>:
20000000:	52415453 52502054 4152474f 000a0d4d     START PROGRAM...

20000010 <msg2>:
20000010:	65746e45 68742072 69732065 6f20657a     Enter the size o
20000020:	68742066 69662065 61776d72 61206572     f the firmware a
20000030:	726f6363 676e6964 206f7420 20656874     ccording to the 
20000040:	746e7973 203a7861 6d726946 65726177     syntax: Firmware
20000050:	7a697320 62283a65 29657479 00000a0d      size:(byte)....

20000060 <msg3>:
20000060:	44414552 45522059 56494543 454e2045     READY RECEIVE NE
20000070:	49462057 41574d52 2e2e4552 000a0d2e     W FIRMWARE......

20000080 <msg4>:
20000080:	65636552 64657669 65687420 77656e20     Received the new
20000090:	72696620 7261776d 75732065 73656363      firmware succes
200000a0:	6c756673 0a0d796c 61647055 676e6974     sfully..Updating
200000b0:	646e6120 62655220 69746f6f 2e2e676e      and Rebooting..
200000c0:	000a0d2e                                ....

200000c4 <UART6_DR>:
200000c4:	40011404                                ...@

200000c8 <SystemCoreClock>:
200000c8:	00f42400                                .$..

200000cc <uwTickPrio>:
200000cc:	00000010                                ....

200000d0 <uwTickFreq>:
200000d0:	00000001                                ....

200000d4 <_impure_ptr>:
200000d4:	200000d8                                ... 

200000d8 <impure_data>:
	...

20000138 <FLASH_erase>:

__attribute__((section (".RamFunc"))) void FLASH_erase(char sector)
{
20000138:	b480      	push	{r7}
2000013a:	b087      	sub	sp, #28
2000013c:	af00      	add	r7, sp, #0
2000013e:	4603      	mov	r3, r0
20000140:	71fb      	strb	r3, [r7, #7]
	uint32_t* KEYR = (uint32_t)(FLASH_BASE_ADD + 0x04);
20000142:	4b20      	ldr	r3, [pc, #128]	; (200001c4 <FLASH_erase+0x8c>)
20000144:	617b      	str	r3, [r7, #20]
	uint32_t* SR = (uint32_t)(FLASH_BASE_ADD + 0x0C);
20000146:	4b20      	ldr	r3, [pc, #128]	; (200001c8 <FLASH_erase+0x90>)
20000148:	613b      	str	r3, [r7, #16]
	uint32_t* CR = (uint32_t)(FLASH_BASE_ADD + 0x10);
2000014a:	4b20      	ldr	r3, [pc, #128]	; (200001cc <FLASH_erase+0x94>)
2000014c:	60fb      	str	r3, [r7, #12]

	/* Check LOCK */
	if(((*CR >> 31) & 1) == 1)
2000014e:	68fb      	ldr	r3, [r7, #12]
20000150:	681b      	ldr	r3, [r3, #0]
20000152:	0fdb      	lsrs	r3, r3, #31
20000154:	2b01      	cmp	r3, #1
20000156:	d105      	bne.n	20000164 <FLASH_erase+0x2c>
	{
		/* If locked, unlock by Key */
		*KEYR = 0x45670123;
20000158:	697b      	ldr	r3, [r7, #20]
2000015a:	4a1d      	ldr	r2, [pc, #116]	; (200001d0 <FLASH_erase+0x98>)
2000015c:	601a      	str	r2, [r3, #0]
		*KEYR = 0xCDEF89AB;
2000015e:	697b      	ldr	r3, [r7, #20]
20000160:	4a1c      	ldr	r2, [pc, #112]	; (200001d4 <FLASH_erase+0x9c>)
20000162:	601a      	str	r2, [r3, #0]
	}

	/* Wait bit BSY: not busy */
	while(((*SR >> 16) & 1) == 1);
20000164:	bf00      	nop
20000166:	693b      	ldr	r3, [r7, #16]
20000168:	681b      	ldr	r3, [r3, #0]
2000016a:	0c1b      	lsrs	r3, r3, #16
2000016c:	f003 0301 	and.w	r3, r3, #1
20000170:	2b00      	cmp	r3, #0
20000172:	d1f8      	bne.n	20000166 <FLASH_erase+0x2e>

	/* Set bit SER: Sector Erase */
	*CR |= 1 << 1;
20000174:	68fb      	ldr	r3, [r7, #12]
20000176:	681b      	ldr	r3, [r3, #0]
20000178:	f043 0202 	orr.w	r2, r3, #2
2000017c:	68fb      	ldr	r3, [r7, #12]
2000017e:	601a      	str	r2, [r3, #0]

	/* Select Sector number */
	*CR |= sector << 3;
20000180:	68fb      	ldr	r3, [r7, #12]
20000182:	681b      	ldr	r3, [r3, #0]
20000184:	79fa      	ldrb	r2, [r7, #7]
20000186:	00d2      	lsls	r2, r2, #3
20000188:	431a      	orrs	r2, r3
2000018a:	68fb      	ldr	r3, [r7, #12]
2000018c:	601a      	str	r2, [r3, #0]

	/* Set bit STRT: Start */
	*CR |= 1 << 16;
2000018e:	68fb      	ldr	r3, [r7, #12]
20000190:	681b      	ldr	r3, [r3, #0]
20000192:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000196:	68fb      	ldr	r3, [r7, #12]
20000198:	601a      	str	r2, [r3, #0]

	/* Wait bit BSY: not busy */
	while(((*SR >> 16) & 1) == 1);
2000019a:	bf00      	nop
2000019c:	693b      	ldr	r3, [r7, #16]
2000019e:	681b      	ldr	r3, [r3, #0]
200001a0:	0c1b      	lsrs	r3, r3, #16
200001a2:	f003 0301 	and.w	r3, r3, #1
200001a6:	2b00      	cmp	r3, #0
200001a8:	d1f8      	bne.n	2000019c <FLASH_erase+0x64>

	/* Reset bit SER */
	*CR &= ~(1 << 1);
200001aa:	68fb      	ldr	r3, [r7, #12]
200001ac:	681b      	ldr	r3, [r3, #0]
200001ae:	f023 0202 	bic.w	r2, r3, #2
200001b2:	68fb      	ldr	r3, [r7, #12]
200001b4:	601a      	str	r2, [r3, #0]
}
200001b6:	bf00      	nop
200001b8:	371c      	adds	r7, #28
200001ba:	46bd      	mov	sp, r7
200001bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200001c0:	4770      	bx	lr
200001c2:	bf00      	nop
200001c4:	40023c04 	.word	0x40023c04
200001c8:	40023c0c 	.word	0x40023c0c
200001cc:	40023c10 	.word	0x40023c10
200001d0:	45670123 	.word	0x45670123
200001d4:	cdef89ab 	.word	0xcdef89ab

200001d8 <FLASH_program>:

__attribute__((section (".RamFunc"))) void FLASH_program(char* addr, char data)
{
200001d8:	b480      	push	{r7}
200001da:	b087      	sub	sp, #28
200001dc:	af00      	add	r7, sp, #0
200001de:	6078      	str	r0, [r7, #4]
200001e0:	460b      	mov	r3, r1
200001e2:	70fb      	strb	r3, [r7, #3]
	uint32_t* KEYR = (uint32_t)(FLASH_BASE_ADD + 0x04);
200001e4:	4b19      	ldr	r3, [pc, #100]	; (2000024c <FLASH_program+0x74>)
200001e6:	617b      	str	r3, [r7, #20]
	uint32_t* SR = (uint32_t)(FLASH_BASE_ADD + 0x0C);
200001e8:	4b19      	ldr	r3, [pc, #100]	; (20000250 <FLASH_program+0x78>)
200001ea:	613b      	str	r3, [r7, #16]
	uint32_t* CR = (uint32_t)(FLASH_BASE_ADD + 0x10);
200001ec:	4b19      	ldr	r3, [pc, #100]	; (20000254 <FLASH_program+0x7c>)
200001ee:	60fb      	str	r3, [r7, #12]

	/* Check LOCK */
	if(((*CR >> 31) & 1) == 1)
200001f0:	68fb      	ldr	r3, [r7, #12]
200001f2:	681b      	ldr	r3, [r3, #0]
200001f4:	0fdb      	lsrs	r3, r3, #31
200001f6:	2b01      	cmp	r3, #1
200001f8:	d105      	bne.n	20000206 <FLASH_program+0x2e>
	{
		/* If locked, unlock by Key */
		*KEYR = 0x45670123;
200001fa:	697b      	ldr	r3, [r7, #20]
200001fc:	4a16      	ldr	r2, [pc, #88]	; (20000258 <FLASH_program+0x80>)
200001fe:	601a      	str	r2, [r3, #0]
		*KEYR = 0xCDEF89AB;
20000200:	697b      	ldr	r3, [r7, #20]
20000202:	4a16      	ldr	r2, [pc, #88]	; (2000025c <FLASH_program+0x84>)
20000204:	601a      	str	r2, [r3, #0]
	}

	/* Wait BSY: busy bit */
	while(((*SR >> 16) & 1) == 1);
20000206:	bf00      	nop
20000208:	693b      	ldr	r3, [r7, #16]
2000020a:	681b      	ldr	r3, [r3, #0]
2000020c:	0c1b      	lsrs	r3, r3, #16
2000020e:	f003 0301 	and.w	r3, r3, #1
20000212:	2b00      	cmp	r3, #0
20000214:	d1f8      	bne.n	20000208 <FLASH_program+0x30>

	/* Set bit PG: Programming */
	*CR |= 1;
20000216:	68fb      	ldr	r3, [r7, #12]
20000218:	681b      	ldr	r3, [r3, #0]
2000021a:	f043 0201 	orr.w	r2, r3, #1
2000021e:	68fb      	ldr	r3, [r7, #12]
20000220:	601a      	str	r2, [r3, #0]

	/* Write data */
	*addr = data;
20000222:	687b      	ldr	r3, [r7, #4]
20000224:	78fa      	ldrb	r2, [r7, #3]
20000226:	701a      	strb	r2, [r3, #0]

	/* Wait BSY: busy bit */
	while(((*SR >> 16) & 1) == 1);
20000228:	bf00      	nop
2000022a:	693b      	ldr	r3, [r7, #16]
2000022c:	681b      	ldr	r3, [r3, #0]
2000022e:	0c1b      	lsrs	r3, r3, #16
20000230:	f003 0301 	and.w	r3, r3, #1
20000234:	2b00      	cmp	r3, #0
20000236:	d1f8      	bne.n	2000022a <FLASH_program+0x52>

	/* Reset bit PG */
	*CR = 0;
20000238:	68fb      	ldr	r3, [r7, #12]
2000023a:	2200      	movs	r2, #0
2000023c:	601a      	str	r2, [r3, #0]
}
2000023e:	bf00      	nop
20000240:	371c      	adds	r7, #28
20000242:	46bd      	mov	sp, r7
20000244:	f85d 7b04 	ldr.w	r7, [sp], #4
20000248:	4770      	bx	lr
2000024a:	bf00      	nop
2000024c:	40023c04 	.word	0x40023c04
20000250:	40023c0c 	.word	0x40023c0c
20000254:	40023c10 	.word	0x40023c10
20000258:	45670123 	.word	0x45670123
2000025c:	cdef89ab 	.word	0xcdef89ab

20000260 <Update>:

__attribute__((section (".RamFunc"))) void Update(int size, char* pData)
{
20000260:	b580      	push	{r7, lr}
20000262:	b086      	sub	sp, #24
20000264:	af00      	add	r7, sp, #0
20000266:	6078      	str	r0, [r7, #4]
20000268:	6039      	str	r1, [r7, #0]
	  FLASH_erase(0);
2000026a:	2000      	movs	r0, #0
2000026c:	f7ff ff64 	bl	20000138 <FLASH_erase>

	  /* Pointer to Sector 0 */
	  char* start_program = 0x08000000;
20000270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20000274:	613b      	str	r3, [r7, #16]
	  for(int i = 0; i < size; i++)
20000276:	2300      	movs	r3, #0
20000278:	617b      	str	r3, [r7, #20]
2000027a:	e00c      	b.n	20000296 <Update+0x36>
	  {
		  FLASH_program(start_program + i, pData[i]);
2000027c:	697b      	ldr	r3, [r7, #20]
2000027e:	693a      	ldr	r2, [r7, #16]
20000280:	18d0      	adds	r0, r2, r3
20000282:	697b      	ldr	r3, [r7, #20]
20000284:	683a      	ldr	r2, [r7, #0]
20000286:	4413      	add	r3, r2
20000288:	781b      	ldrb	r3, [r3, #0]
2000028a:	4619      	mov	r1, r3
2000028c:	f7ff ffa4 	bl	200001d8 <FLASH_program>
	  for(int i = 0; i < size; i++)
20000290:	697b      	ldr	r3, [r7, #20]
20000292:	3301      	adds	r3, #1
20000294:	617b      	str	r3, [r7, #20]
20000296:	697a      	ldr	r2, [r7, #20]
20000298:	687b      	ldr	r3, [r7, #4]
2000029a:	429a      	cmp	r2, r3
2000029c:	dbee      	blt.n	2000027c <Update+0x1c>
	  }

	  /* Software reset */
	  uint32_t* AIRCR = (uint32_t*)(0xE000ED0C);
2000029e:	4b06      	ldr	r3, [pc, #24]	; (200002b8 <Update+0x58>)
200002a0:	60fb      	str	r3, [r7, #12]
	  *AIRCR |= (0x5FA << 16) | (1<<2); // SYSRESETREQ
200002a2:	68fb      	ldr	r3, [r7, #12]
200002a4:	681a      	ldr	r2, [r3, #0]
200002a6:	4b05      	ldr	r3, [pc, #20]	; (200002bc <Update+0x5c>)
200002a8:	4313      	orrs	r3, r2
200002aa:	68fa      	ldr	r2, [r7, #12]
200002ac:	6013      	str	r3, [r2, #0]
}
200002ae:	bf00      	nop
200002b0:	3718      	adds	r7, #24
200002b2:	46bd      	mov	sp, r7
200002b4:	bd80      	pop	{r7, pc}
200002b6:	bf00      	nop
200002b8:	e000ed0c 	.word	0xe000ed0c
200002bc:	05fa0004 	.word	0x05fa0004
